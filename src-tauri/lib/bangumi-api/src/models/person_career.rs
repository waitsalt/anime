/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PersonCareer : An enumeration.
/// An enumeration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PersonCareer {
    #[serde(rename = "producer")]
    Producer,
    #[serde(rename = "mangaka")]
    Mangaka,
    #[serde(rename = "artist")]
    Artist,
    #[serde(rename = "seiyu")]
    Seiyu,
    #[serde(rename = "writer")]
    Writer,
    #[serde(rename = "illustrator")]
    Illustrator,
    #[serde(rename = "actor")]
    Actor,

}

impl std::fmt::Display for PersonCareer {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Producer => write!(f, "producer"),
            Self::Mangaka => write!(f, "mangaka"),
            Self::Artist => write!(f, "artist"),
            Self::Seiyu => write!(f, "seiyu"),
            Self::Writer => write!(f, "writer"),
            Self::Illustrator => write!(f, "illustrator"),
            Self::Actor => write!(f, "actor"),
        }
    }
}

impl Default for PersonCareer {
    fn default() -> PersonCareer {
        Self::Producer
    }
}

