/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LegacySubjectSmallCollection : 收藏人数
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacySubjectSmallCollection {
    /// 想做
    #[serde(rename = "wish", skip_serializing_if = "Option::is_none")]
    pub wish: Option<i32>,
    /// 做过
    #[serde(rename = "collect", skip_serializing_if = "Option::is_none")]
    pub collect: Option<i32>,
    /// 在做
    #[serde(rename = "doing", skip_serializing_if = "Option::is_none")]
    pub doing: Option<i32>,
    /// 搁置
    #[serde(rename = "on_hold", skip_serializing_if = "Option::is_none")]
    pub on_hold: Option<i32>,
    /// 抛弃
    #[serde(rename = "dropped", skip_serializing_if = "Option::is_none")]
    pub dropped: Option<i32>,
}

impl LegacySubjectSmallCollection {
    /// 收藏人数
    pub fn new() -> LegacySubjectSmallCollection {
        LegacySubjectSmallCollection {
            wish: None,
            collect: None,
            doing: None,
            on_hold: None,
            dropped: None,
        }
    }
}

