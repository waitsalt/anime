/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchSubjectsRequest {
    #[serde(rename = "keyword")]
    pub keyword: String,
    /// 排序规则  - `match` meilisearch 的默认排序，按照匹配程度 - `heat` 收藏人数 - `rank` 排名由高到低 - `score` 评分 
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Sort>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<models::SearchSubjectsRequestFilter>>,
}

impl SearchSubjectsRequest {
    pub fn new(keyword: String) -> SearchSubjectsRequest {
        SearchSubjectsRequest {
            keyword,
            sort: None,
            filter: None,
        }
    }
}
/// 排序规则  - `match` meilisearch 的默认排序，按照匹配程度 - `heat` 收藏人数 - `rank` 排名由高到低 - `score` 评分 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sort {
    #[serde(rename = "match")]
    Match,
    #[serde(rename = "heat")]
    Heat,
    #[serde(rename = "rank")]
    Rank,
    #[serde(rename = "score")]
    Score,
}

impl Default for Sort {
    fn default() -> Sort {
        Self::Match
    }
}

