/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelatedPerson {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "name")]
    pub name: String,
    /// `1`, `2`, `3` 表示 `个人`, `公司`, `组合`
    #[serde(rename = "type")]
    pub r#type: models::PersonType,
    #[serde(rename = "career")]
    pub career: Vec<models::PersonCareer>,
    /// object with some size of images, this object maybe `null`
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Box<models::PersonImages>>,
    #[serde(rename = "relation")]
    pub relation: String,
    /// 参与章节/曲目
    #[serde(rename = "eps")]
    pub eps: String,
}

impl RelatedPerson {
    pub fn new(id: i32, name: String, r#type: models::PersonType, career: Vec<models::PersonCareer>, relation: String, eps: String) -> RelatedPerson {
        RelatedPerson {
            id,
            name,
            r#type,
            career,
            images: None,
            relation,
            eps,
        }
    }
}

