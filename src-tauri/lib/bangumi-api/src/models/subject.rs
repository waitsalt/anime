/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subject {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "type")]
    pub r#type: models::SubjectType,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "name_cn")]
    pub name_cn: String,
    #[serde(rename = "summary")]
    pub summary: String,
    /// 是否为书籍系列的主条目
    #[serde(rename = "series")]
    pub series: bool,
    #[serde(rename = "nsfw")]
    pub nsfw: bool,
    #[serde(rename = "locked")]
    pub locked: bool,
    /// air date in `YYYY-MM-DD` format
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// TV, Web, 欧美剧, DLC...
    #[serde(rename = "platform")]
    pub platform: String,
    #[serde(rename = "images")]
    pub images: Box<models::Images>,
    #[serde(rename = "infobox", skip_serializing_if = "Option::is_none")]
    pub infobox: Option<Vec<models::Item>>,
    /// 书籍条目的册数，由旧服务端从wiki中解析
    #[serde(rename = "volumes")]
    pub volumes: i32,
    /// 由旧服务端从wiki中解析，对于书籍条目为`话数`
    #[serde(rename = "eps")]
    pub eps: i32,
    /// 数据库中的章节数量
    #[serde(rename = "total_episodes")]
    pub total_episodes: i32,
    #[serde(rename = "rating")]
    pub rating: Box<models::Rating>,
    #[serde(rename = "collection")]
    pub collection: Box<models::Collection>,
    /// 由维基人维护的 tag
    #[serde(rename = "meta_tags")]
    pub meta_tags: Vec<String>,
    #[serde(rename = "tags")]
    pub tags: Vec<models::Tag>,
}

impl Subject {
    pub fn new(id: i32, r#type: models::SubjectType, name: String, name_cn: String, summary: String, series: bool, nsfw: bool, locked: bool, platform: String, images: models::Images, volumes: i32, eps: i32, total_episodes: i32, rating: models::Rating, collection: models::Collection, meta_tags: Vec<String>, tags: Vec<models::Tag>) -> Subject {
        Subject {
            id,
            r#type,
            name,
            name_cn,
            summary,
            series,
            nsfw,
            locked,
            date: None,
            platform,
            images: Box::new(images),
            infobox: None,
            volumes,
            eps,
            total_episodes,
            rating: Box::new(rating),
            collection: Box::new(collection),
            meta_tags,
            tags,
        }
    }
}

