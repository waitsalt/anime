/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_repr::{Serialize_repr,Deserialize_repr};
/// UserGroup : 用户组 - 1 = 管理员 - 2 = Bangumi 管理猿 - 3 = 天窗管理猿 - 4 = 禁言用户 - 5 = 禁止访问用户 - 8 = 人物管理猿 - 9 = 维基条目管理猿 - 10 = 用户 - 11 = 维基人
/// 用户组 - 1 = 管理员 - 2 = Bangumi 管理猿 - 3 = 天窗管理猿 - 4 = 禁言用户 - 5 = 禁止访问用户 - 8 = 人物管理猿 - 9 = 维基条目管理猿 - 10 = 用户 - 11 = 维基人
#[repr(i64)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize_repr, Deserialize_repr)]
pub enum UserGroup {
    Admin = 1,
    BangumiAdmin = 2,
    DoujinAdmin = 3,
    MutedUser = 4,
    BlockedUser = 5,
    PersonAdmin = 8,
    WikiAdmin = 9,
    User = 10,
    WikiUser = 11,

}

impl std::fmt::Display for UserGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", match self {
            Self::Admin => "1",
            Self::BangumiAdmin => "2",
            Self::DoujinAdmin => "3",
            Self::MutedUser => "4",
            Self::BlockedUser => "5",
            Self::PersonAdmin => "8",
            Self::WikiAdmin => "9",
            Self::User => "10",
            Self::WikiUser => "11",
        })
    }
}
impl Default for UserGroup {
    fn default() -> UserGroup {
        Self::Admin
    }
}

