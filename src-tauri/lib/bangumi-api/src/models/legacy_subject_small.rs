/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacySubjectSmall {
    /// 条目 ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 条目地址
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// 条目类型 - `1` 为 书籍 - `2` 为 动画 - `3` 为 音乐 - `4` 为 游戏 - `6` 为 三次元  没有 `5`
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// 条目名称
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// 条目中文名称
    #[serde(rename = "name_cn", skip_serializing_if = "Option::is_none")]
    pub name_cn: Option<String>,
    /// 剧情简介
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    /// 放送开始日期
    #[serde(rename = "air_date", skip_serializing_if = "Option::is_none")]
    pub air_date: Option<String>,
    /// 放送星期
    #[serde(rename = "air_weekday", skip_serializing_if = "Option::is_none")]
    pub air_weekday: Option<i32>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Box<models::LegacySubjectSmallImages>>,
    /// 话数
    #[serde(rename = "eps", skip_serializing_if = "Option::is_none")]
    pub eps: Option<i32>,
    /// 话数
    #[serde(rename = "eps_count", skip_serializing_if = "Option::is_none")]
    pub eps_count: Option<i32>,
    #[serde(rename = "rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<Box<models::LegacySubjectSmallRating>>,
    /// 排名
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
    pub collection: Option<Box<models::LegacySubjectSmallCollection>>,
}

impl LegacySubjectSmall {
    pub fn new() -> LegacySubjectSmall {
        LegacySubjectSmall {
            id: None,
            url: None,
            r#type: None,
            name: None,
            name_cn: None,
            summary: None,
            air_date: None,
            air_weekday: None,
            images: None,
            eps: None,
            eps_count: None,
            rating: None,
            rank: None,
            collection: None,
        }
    }
}
/// 条目类型 - `1` 为 书籍 - `2` 为 动画 - `3` 为 音乐 - `4` 为 游戏 - `6` 为 三次元  没有 `5`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "1")]
    Book,
    #[serde(rename = "2")]
    Anime,
    #[serde(rename = "3")]
    Music,
    #[serde(rename = "4")]
    Game,
    #[serde(rename = "6")]
    Real,
}

impl Default for Type {
    fn default() -> Type {
        Self::Book
    }
}

