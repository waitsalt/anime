/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LegacyEpisode : 章节信息
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyEpisode {
    /// 章节 ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// 章节地址
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::LegacyEpisodeType>,
    /// 集数
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<i32>,
    /// 标题
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// 简体中文标题
    #[serde(rename = "name_cn", skip_serializing_if = "Option::is_none")]
    pub name_cn: Option<String>,
    /// 时长
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// 放送日期
    #[serde(rename = "airdate", skip_serializing_if = "Option::is_none")]
    pub airdate: Option<String>,
    /// 回复数量
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<i32>,
    /// 简介
    #[serde(rename = "desc", skip_serializing_if = "Option::is_none")]
    pub desc: Option<String>,
    /// 放送状态 <br> Air = 已放送 <br> Today = 正在放送 <br> NA = 未放送
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl LegacyEpisode {
    /// 章节信息
    pub fn new() -> LegacyEpisode {
        LegacyEpisode {
            id: None,
            url: None,
            r#type: None,
            sort: None,
            name: None,
            name_cn: None,
            duration: None,
            airdate: None,
            comment: None,
            desc: None,
            status: None,
        }
    }
}
/// 放送状态 <br> Air = 已放送 <br> Today = 正在放送 <br> NA = 未放送
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Air")]
    Air,
    #[serde(rename = "Today")]
    Today,
    #[serde(rename = "NA")]
    Na,
}

impl Default for Status {
    fn default() -> Status {
        Self::Air
    }
}

