/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_repr::{Serialize_repr,Deserialize_repr};
/// SubjectGameCategory : 游戏类型 - `0` 为 其他 - `4001` 为 游戏 - `4002` 为 软件 - `4003` 为 扩展包 - `4005` 为 桌游
/// 游戏类型 - `0` 为 其他 - `4001` 为 游戏 - `4002` 为 软件 - `4003` 为 扩展包 - `4005` 为 桌游
#[repr(i64)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize_repr, Deserialize_repr)]
pub enum SubjectGameCategory {
    Other = 0,
    Games = 4001,
    Software = 4003,
    DLC = 4002,
    Tabletop = 4005,

}

impl std::fmt::Display for SubjectGameCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", match self {
            Self::Other => "0",
            Self::Games => "4001",
            Self::Software => "4003",
            Self::DLC => "4002",
            Self::Tabletop => "4005",
        })
    }
}
impl Default for SubjectGameCategory {
    fn default() -> SubjectGameCategory {
        Self::Other
    }
}

