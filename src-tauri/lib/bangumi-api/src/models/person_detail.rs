/*
 * Bangumi API
 *
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-07-1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PersonDetail {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "name")]
    pub name: String,
    /// `1`, `2`, `3` 表示 `个人`, `公司`, `组合`
    #[serde(rename = "type")]
    pub r#type: models::PersonType,
    #[serde(rename = "career")]
    pub career: Vec<models::PersonCareer>,
    /// object with some size of images, this object maybe `null`
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Box<models::PersonImages>>,
    #[serde(rename = "summary")]
    pub summary: String,
    #[serde(rename = "locked")]
    pub locked: bool,
    /// currently it's latest user comment time, it will be replaced by wiki modified date in the future
    #[serde(rename = "last_modified")]
    pub last_modified: String,
    /// server parsed infobox, a map from key to string or tuple null if server infobox is not valid
    #[serde(rename = "infobox", skip_serializing_if = "Option::is_none")]
    pub infobox: Option<Vec<serde_json::Value>>,
    /// parsed from wiki, maybe null
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<String>,
    /// parsed from wiki, maybe null, `1, 2, 3, 4` for `A, B, AB, O`
    #[serde(rename = "blood_type", skip_serializing_if = "Option::is_none")]
    pub blood_type: Option<models::BloodType>,
    /// parsed from wiki, maybe `null`
    #[serde(rename = "birth_year", skip_serializing_if = "Option::is_none")]
    pub birth_year: Option<i32>,
    /// parsed from wiki, maybe `null`
    #[serde(rename = "birth_mon", skip_serializing_if = "Option::is_none")]
    pub birth_mon: Option<i32>,
    /// parsed from wiki, maybe `null`
    #[serde(rename = "birth_day", skip_serializing_if = "Option::is_none")]
    pub birth_day: Option<i32>,
    #[serde(rename = "stat")]
    pub stat: Box<models::Stat>,
}

impl PersonDetail {
    pub fn new(id: i32, name: String, r#type: models::PersonType, career: Vec<models::PersonCareer>, summary: String, locked: bool, last_modified: String, stat: models::Stat) -> PersonDetail {
        PersonDetail {
            id,
            name,
            r#type,
            career,
            images: None,
            summary,
            locked,
            last_modified,
            infobox: None,
            gender: None,
            blood_type: None,
            birth_year: None,
            birth_mon: None,
            birth_day: None,
            stat: Box::new(stat),
        }
    }
}

